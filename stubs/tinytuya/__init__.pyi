from _typeshed import Incomplete
from typing import NamedTuple

version_tuple: Incomplete
version: Incomplete
log: Incomplete
MAXCOUNT: int
UDPPORT: int
UDPPORTS: int
TCPPORT: int
TIMEOUT: float
TCPTIMEOUT: float
DEFAULT_NETWORK: str
CONFIGFILE: str
DEVICEFILE: str
RAWFILE: str
SNAPSHOTFILE: str
UDP: int
AP_CONFIG: int
ACTIVE: int
BIND: int
RENAME_GW: int
RENAME_DEVICE: int
UNBIND: int
CONTROL: int
STATUS: int
HEART_BEAT: int
DP_QUERY: int
QUERY_WIFI: int
TOKEN_BIND: int
CONTROL_NEW: int
ENABLE_WIFI: int
DP_QUERY_NEW: int
SCENE_EXECUTE: int
UPDATEDPS: int
UDP_NEW: int
AP_CONFIG_NEW: int
GET_LOCAL_TIME_CMD: int
WEATHER_OPEN_CMD: int
WEATHER_DATA_CMD: int
STATE_UPLOAD_SYN_CMD: int
STATE_UPLOAD_SYN_RECV_CMD: int
HEAT_BEAT_STOP: int
STREAM_TRANS_CMD: int
GET_WIFI_STATUS_CMD: int
WIFI_CONNECT_TEST_CMD: int
GET_MAC_CMD: int
GET_IR_STATUS_CMD: int
IR_TX_RX_TEST_CMD: int
LAN_GW_ACTIVE: int
LAN_SUB_DEV_REQUEST: int
LAN_DELETE_SUB_DEV: int
LAN_REPORT_SUB_DEV: int
LAN_SCENE: int
LAN_PUBLISH_CLOUD_CONFIG: int
LAN_PUBLISH_APP_CONFIG: int
LAN_EXPORT_APP_CONFIG: int
LAN_PUBLISH_SCENE_PANEL: int
LAN_REMOVE_GW: int
LAN_CHECK_GW_UPDATE: int
LAN_GW_UPDATE: int
LAN_SET_GW_CHANNEL: int
PROTOCOL_VERSION_BYTES_31: bytes
PROTOCOL_VERSION_BYTES_33: bytes
PROTOCOL_33_HEADER: Incomplete
MESSAGE_HEADER_FMT: str
MESSAGE_RECV_HEADER_FMT: str
MESSAGE_END_FMT: str
PREFIX_VALUE: int
SUFFIX_VALUE: int
SUFFIX_BIN: bytes

class TuyaMessage(NamedTuple):
    seqno: Incomplete
    cmd: Incomplete
    retcode: Incomplete
    payload: Incomplete
    crc: Incomplete
IS_PY2: Incomplete
ERR_JSON: int
ERR_CONNECT: int
ERR_TIMEOUT: int
ERR_RANGE: int
ERR_PAYLOAD: int
ERR_OFFLINE: int
ERR_STATE: int
ERR_FUNCTION: int
ERR_DEVTYPE: int
ERR_CLOUDKEY: int
ERR_CLOUDRESP: int
ERR_CLOUDTOKEN: int
ERR_PARAMS: int
ERR_CLOUD: int
error_codes: Incomplete

class AESCipher:
    bs: int
    key: Incomplete
    def __init__(self, key) -> None: ...
    def encrypt(self, raw, use_base64: bool = ...): ...
    def decrypt(self, enc, use_base64: bool = ...): ...

def bin2hex(x, pretty: bool = ...): ...
def hex2bin(x): ...
def set_debug(toggle: bool = ..., color: bool = ...) -> None: ...
def pack_message(msg): ...
def unpack_message(data): ...
def has_suffix(payload): ...
def error_json(number: Incomplete | None = ..., payload: Incomplete | None = ...): ...

payload_dict: Incomplete

class XenonDevice:
    id: Incomplete
    address: Incomplete
    local_key: Incomplete
    connection_timeout: Incomplete
    version: float
    retry: bool
    dev_type: Incomplete
    disabledetect: bool
    port: Incomplete
    socket: Incomplete
    socketPersistent: bool
    socketNODELAY: bool
    socketRetryLimit: int
    cipher: Incomplete
    dps_to_request: Incomplete
    seqno: int
    sendWait: float
    def __init__(self, dev_id, address, local_key: str = ..., dev_type: str = ..., connection_timeout: int = ...) -> None: ...
    def __del__(self) -> None: ...
    def receive(self): ...
    def send(self, payload): ...
    dps_cache: Incomplete
    def detect_available_dps(self): ...
    def add_dps_to_request(self, dp_indicies) -> None: ...
    bulb_type: Incomplete
    def set_bulb_type(self, type) -> None: ...
    def set_version(self, version) -> None: ...
    def set_socketPersistent(self, persist) -> None: ...
    def set_socketNODELAY(self, nodelay) -> None: ...
    def set_socketRetryLimit(self, limit) -> None: ...
    def set_socketTimeout(self, s) -> None: ...
    def set_dpsUsed(self, dps_to_request) -> None: ...
    def set_retry(self, retry) -> None: ...
    def set_sendWait(self, s) -> None: ...
    def close(self) -> None: ...
    def find(self, did: Incomplete | None = ...): ...
    def generate_payload(self, command, data: Incomplete | None = ..., gwId: Incomplete | None = ..., devId: Incomplete | None = ..., uid: Incomplete | None = ...): ...

class Device(XenonDevice):
    def __init__(self, dev_id, address, local_key: str = ..., dev_type: str = ...) -> None: ...
    def status(self): ...
    def set_status(self, on, switch: int = ...): ...
    def product(self): ...
    def heartbeat(self): ...
    def updatedps(self, index=...): ...
    def set_value(self, index, value): ...
    def turn_on(self, switch: int = ...) -> None: ...
    def turn_off(self, switch: int = ...) -> None: ...
    def set_timer(self, num_secs, dps_id: int = ...): ...

class OutletDevice(Device):
    def __init__(self, dev_id, address, local_key: str = ..., dev_type: str = ...) -> None: ...
    def set_dimmer(self, percentage: Incomplete | None = ..., value: Incomplete | None = ..., dps_id: int = ...) -> None: ...

class CoverDevice(Device):
    DPS_INDEX_MOVE: str
    DPS_INDEX_BL: str
    DPS_2_STATE: Incomplete
    def __init__(self, dev_id, address, local_key: str = ..., dev_type: str = ...) -> None: ...
    def open_cover(self, switch: int = ...) -> None: ...
    def close_cover(self, switch: int = ...) -> None: ...
    def stop_cover(self, switch: int = ...) -> None: ...

class BulbDevice(Device):
    DPS_INDEX_ON: Incomplete
    DPS_INDEX_MODE: Incomplete
    DPS_INDEX_BRIGHTNESS: Incomplete
    DPS_INDEX_COLOURTEMP: Incomplete
    DPS_INDEX_COLOUR: Incomplete
    DPS_INDEX_SCENE: Incomplete
    DPS_INDEX_TIMER: Incomplete
    DPS_INDEX_MUSIC: Incomplete
    DPS: str
    DPS_MODE_WHITE: str
    DPS_MODE_COLOUR: str
    DPS_MODE_SCENE: str
    DPS_MODE_MUSIC: str
    DPS_MODE_SCENE_1: str
    DPS_MODE_SCENE_2: str
    DPS_MODE_SCENE_3: str
    DPS_MODE_SCENE_4: str
    DPS_2_STATE: Incomplete
    bulb_type: str
    has_brightness: bool
    has_colourtemp: bool
    has_colour: bool
    def __init__(self, dev_id, address, local_key: str = ..., dev_type: str = ...) -> None: ...
    version: Incomplete
    def set_version(self, version) -> None: ...
    def turn_on(self, switch: int = ...) -> None: ...
    def turn_off(self, switch: int = ...) -> None: ...
    def set_mode(self, mode: str = ...): ...
    def set_scene(self, scene): ...
    def set_colour(self, r, g, b): ...
    def set_hsv(self, h, s, v): ...
    def set_white_percentage(self, brightness: int = ..., colourtemp: int = ...): ...
    def set_white(self, brightness: int = ..., colourtemp: int = ...): ...
    def set_brightness_percentage(self, brightness: int = ...): ...
    def set_brightness(self, brightness): ...
    def set_colourtemp_percentage(self, colourtemp: int = ...): ...
    def set_colourtemp(self, colourtemp): ...
    def brightness(self): ...
    def colourtemp(self): ...
    def colour_rgb(self): ...
    def colour_hsv(self): ...
    def state(self): ...

def pad(s): ...
def unpad(s): ...
def encrypt(msg, key): ...
def decrypt(msg, key): ...

udpkey: Incomplete

def decrypt_udp(msg): ...
def floor(x): ...
def appenddevice(newdevice, devices): ...
def termcolor(color: bool = ...): ...
def scan(maxretry: Incomplete | None = ..., color: bool = ..., forcescan: bool = ...) -> None: ...
def deviceScan(verbose: bool = ..., maxretry: Incomplete | None = ..., color: bool = ..., poll: bool = ..., forcescan: bool = ..., byID: bool = ...): ...

class Cloud:
    CONFIGFILE: str
    apiRegion: Incomplete
    apiKey: Incomplete
    apiSecret: Incomplete
    apiDeviceID: Incomplete
    urlhost: str
    uid: Incomplete
    token: Incomplete
    new_sign_algorithm: Incomplete
    def __init__(self, apiRegion: Incomplete | None = ..., apiKey: Incomplete | None = ..., apiSecret: Incomplete | None = ..., apiDeviceID: Incomplete | None = ..., new_sign_algorithm: bool = ...): ...
    def setregion(self, apiRegion: Incomplete | None = ...) -> None: ...
    def getdevices(self, verbose: bool = ...): ...
    def getstatus(self, deviceid: Incomplete | None = ...): ...
    def getfunctions(self, deviceid: Incomplete | None = ...): ...
    def getproperties(self, deviceid: Incomplete | None = ...): ...
    def getdps(self, deviceid: Incomplete | None = ...): ...
    def sendcommand(self, deviceid: Incomplete | None = ..., commands: Incomplete | None = ...): ...
